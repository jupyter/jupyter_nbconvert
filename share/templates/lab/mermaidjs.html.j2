{%- macro mermaid_js(
url="https://cdnjs.cloudflare.com/ajax/libs/mermaid/10.0.2/mermaid.esm.min.mjs"
) -%}
<script type="module">
  document.addEventListener("DOMContentLoaded", async () => {
    const diagrams = document.querySelectorAll(".jp-Mermaid > pre.mermaid");
    // do not load mermaidjs if not needed
    if (!diagrams.length) {
      return;
    }
    const mermaid = (await import("{{ url }}")).default;

    mermaid.initialize({
      maxTextSize: 100000,
      startOnLoad: false,
      fontFamily: window
        .getComputedStyle(document.body)
        .getPropertyValue("--jp-ui-font-family"),
      theme: document.querySelector("body[data-jp-theme-light='true']")
        ? "default"
        : "dark",
    });

    let _nextMermaidId = 0;

    function makeMermaidImage(svg) {
      const img = document.createElement("img");
      const maxWidth = svg.match(/max-width: (\d+)/);
      if (maxWidth && maxWidth[1]) {
        const width = parseInt(maxWidth[1]);
        if (width && !Number.isNaN(width) && Number.isFinite(width)) {
          img.width = width;
        }
      }
      img.setAttribute("src", `data:image/svg+xml,${encodeURIComponent(svg)}`);
      return img;
    }

    async function renderOneMarmaid(src) {
      const id = `jp-mermaid-${_nextMermaidId++}`;
      let svg = "";
      let error = "";
      const parent = src.parentNode;
      let raw = src.textContent;
      const el = document.createElement("div");
      el.style.visibility = "hidden";
      document.body.appendChild(el);
      try {
        svg = (await mermaid.render(id, raw, el)).svg;
        parent.appendChild(makeMermaidImage(svg));
        src.remove();
      } catch (err) {
        try {
          await mermaid.parse(raw);
        } catch (err) {
          error = `${err}`;
        }
      } finally {
        el.remove();
      }
      parent.classList.add("jp-RenderedMermaid");
      if (error) {
        parent.innerHTML = `<details>
          <summary>
            <pre><code>${raw}</code></pre>
          </summary>
          <pre><code>${error}</code></pre>
        </details>`;
        parent.classList.add("jp-mod-warning");
      }
    }

    void Promise.all([...diagrams].map(renderOneMarmaid));
  });
</script>
<style>
  .jp-RenderedMarkdown .jp-Mermaid:not(.jp-RenderedMermaid) {
    display: none;
  }
  .jp-RenderedMarkdown .jp-RenderedMermaid.jp-mod-warning {
    width: auto;
    padding: 10px;
    border: var(--jp-border-width) solid var(--jp-warn-color2);
    border-radius: var(--jp-border-radius);
    color: var(--jp-ui-font-color1);
    font-size: var(--jp-ui-font-size1);
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  .jp-RenderedMarkdown .jp-RenderedMermaid.jp-mod-warning details > pre {
    margin-top: 1em;
  }
  .jp-RenderedMarkdown .jp-RenderedMermaid.jp-mod-warning summary {
    color: var(--jp-warn-color2);
  }
  .jp-RenderedMarkdown .jp-RenderedMermaid.jp-mod-warning summary > pre {
    display: inline-block;
  }
</style>
<!-- End of mermaid configuration -->
{%- endmacro %}
